package Examples.java_util;

import java.util.Timer;
import java.util.TimerTask;

public class ExampleTimerAndTimerTask {
    public static void main(String[] args) {
//--------------------------------------------------------------------------------------------------------------------
        // Demonstrate Timer and TimerTask.
        MyTimerTask myTask = new MyTimerTask();
        Timer myTimer = new Timer();

        // Set an initial delay of 1 second, then repeat every half second.
        myTimer.schedule(myTask, 1000, 500);

        // eto dlya toho zdelano chtobu potok ne zaverwilsa bestree vremeni
        try {
            Thread.sleep(5000);
        } catch (InterruptedException exc) {
        }

        myTimer.cancel();
//--------------------------------------------------------------------------------------------------------------------
    }
}

class MyTimerTask extends TimerTask {
    public void run() {
        System.out.println("Timer task executed.");
    }
}

/*
----------------------------------------------------------------------------------------------------------------------
В пакете j ava . ut i l предоставляется интересная и удобная возможность пла­
нировать запуск задания в определенный момент времени в будущем. Такую воз·
можность предоставляют классы T ime r и T ime r T a s k. Используя эти классы, мож·
но создать поток, исполняющийся в фоновом режиме и ожидающий в течение
заданного времени. По истечении заданного времени запускается задание , с вя·
занное с этим потоком исполнения. Различные параметры позволяют заIUiани ро­
вать запуск задания на повторное исполнение или на определенную дату. И хотя
с помощью класса Thread можно всегда запланировать задание вручную на запуск
в определенный момент времени, тем не менее классы T ime r и T ime rTa s k знач и·
тельно упрощают этот процесс.
Классы T ime r и T ime rTa s k действуют совместно. В частности, класс T imer
служит для планирования выполняемого задания. Планируемое задание должно
быть экземпляром класса T ime r Ta s k. Следовательно, чтобы запланировать зада·
ние, следует создать сначала объект класса T ime r T a s k, а затем запланировать его
запуск с помощью экземпляра класса т ime r .
Класс T imerTa s k реализует интерфейс RunnaЫe . Это означает, что он может
быть использован для создания потока исполнения. Ниже приведен его конструктор.
TimerTask ( )
В классе T imerTa s k определены методы, перечисленные в табл. 19.9. Обратите
внимание на то, что метод run ( ) является абстрактным, а это означает, что он дол·
жен быть переопределен. Метод run ( ) , определенный в интерфейсе RunnaЫe, со­
держит исполняемый код. Следовательно, простейший способ заплан ировать запуск
задания по таймеру - расширить класс Т imerTa s k и переопределить метод run ( )
Как только задание будет сформировано, его выполнение планируется с помо­
щью объекта класса T ime r . Ниже приведены конструкторы класса T ime r .
.
Timer ( )
Timer (boolean лo!l'oжo.IWJi денан)
Tiшer ( S tring . ,.. ло!l'ожаТ
Timer ( S tring .,, ,. :ло!l'ожа
, Ьoolean
ло!l'ожо.вшi _денан)
В первой форме конструктора сначала создается объект типа Т ime r , а зате м он
запускается как обычный поток исполнения. Во второй форме используется пото­
ковый демон, если параметр по токовьт.й_ демон принимает логическое значен ие
true. Потоковый демон будет исполняться только до тех пор, пока выполняется
о стальная часть программы. Третья и четвертая формы конструкторов позволяют
указывать имя объекта типа T ime r .
----------------------------------------------------------------------------------------------------------------------

*/
