package java_net;

import java.io.IOException;
import java.io.PrintWriter;
import java.net.Socket;
import java.util.Scanner;

public class ExampleSocket {
    public static void main(String[] args) throws IOException {
//--------------------------------------------------------------------------------------------------------------------
//        // Demonstrate Sockets.
//        int c;
//
//        // Create age socket connected to internic.net, port 43.
//        Socket socket = new Socket("whois.internic.net", 43);
////        Socket socket = new Socket("google.com", 43);
//
//        // Obtain input and output streams.
//        InputStream in = socket.getInputStream();
//        OutputStream out = socket.getOutputStream();
//
//        // Construct age request string.
//        String str = (args.length == 0 ? "MHProfessional.com" : args[0]) + "\n";
//        String strGoogle = "google.com";
//
//        // Convert to bytes.
//        byte buf[] = str.getBytes();
////        byte buf[] = strGoogle.getBytes();
//
//        // Send request.
//        out.write(buf);
//
//        // Read and display response.
//        while ((c = in.read()) != -1) {
//            System.out.print((char) c);
//        }
//        // Закрытие сокета приводит также к закры­тию связанных с ним потоков ввода-вывода.
//        socket.close();
//--------------------------------------------------------------------------------------------------------------------
//        try (Socket socket = new Socket("time-a.nist.gov",13);
//             Scanner in = new Scanner(socket.getInputStream(), "UTF-8")){
//
//            while (in.hasNextLine()){
//                String line = in.nextLine();
//                System.out.println(line);
//            }
//        }
//--------------------------------------------------------------------------------------------------------------------
        try (Socket socket = new Socket("localhost", 8189)) {

            Scanner in = new Scanner(socket.getInputStream(), "UTF-8");
            PrintWriter writer = new PrintWriter(socket.getOutputStream());

            // передать данные запроса
            writer.print("Hello");
            writer.flush();

            socket.shutdownOutput();

            // теперь сокет полузакрыт
            // принять данные ответа
            while (in.hasNextLine()) {
                String line = in.nextLine();
            }
        }
//--------------------------------------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------------------------------------
    }
}

/*
----------------------------------------------------------------------------------------------------------------------
--------------------------------------------------Socket--------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------
Сокет — это абстрактное понятие, обозначающее возможность для программ устанавливать соединения для обмена
данными по сети.

----------------------------------------------------------------------------------------------------------------------
---------------------------------------------------Port---------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------
В сетевой терминологии порт — это не какое-то конкретное физическое
устройство, а абстрактное понятие, упрощающее представление о соединении сервера с клиентом

----------------------------------------------------------------------------------------------------------------------
--------------------------------------------------TCP/IP--------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------
Сокеты по протоколу ТСР /IP служат для реализации надежных двунаправ·
ленных, постоянных, двухточечных, потоковых соединений между хостами
в Интернете. Сокет может служить для подключения системы ввода-вывода в J ava
к другим программам, которые могут находиться как на локальной машине, так
и на любой другой машине в Интернете.

----------------------------------------------------------------------------------------------------------------------
------------------------------------------------setSoTimeout()--------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------
Для конкретной прикладной программы можно самостоятельно определить
наиболее подходящую величину времени ожидания для сокета, а затем вызвать
метод setSoTimeout (), чтобы установить эту величину в миллисекундах. В
приведенном ниже фрагменте кода показано, как это делается.

Socket s = new Socket("google.com", 80))
s.setSoTimeout(10_000); // истечение времени ожидания через 10 секунд
-------------------------
Так, приведенный ниже конструктор может установить блокировку в течение неопределенного
периода времени до тех пор, пока не будет установлено первоначальное соединение с хостом.

Socket(String host, int port)
Эго затруднение можно преодолеть, если сначала создать несоединяемый
сокет, а затем установить соединение с ним, задав время ожидания:

Socket s = new Socket();
s.connect(new InetSocketAddress(host, port), timeout);

----------------------------------------------------------------------------------------------------------------------
-----------------------------------------------AutoCloseable----------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------
Начиная с версииJDК 7 класс Socket реализует также интерфейс AutoCloseaЫe. Это означает, что управление соке­
том можно организовать в блоке оператора t r y с ресурсами.

----------------------------------------------------------------------------------------------------------------------
--------------------------------------------------METHODS-------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------
void shutdownOutput() 1.3
                    Устанавливает поток вывода в состояние завершения.

void shutdownlnput() 1.3
                    Устанавливает поток ввода в состояние завершения.

boolean isOutputShutdown() 1.4
                    Возвращает логическое значение true, если вывод данных был остановлен.

boolean isInputShutdown() 1.4
                    Возвращает логическое значение true, если ввод данных был остановлен.

connect()           позволяющий указать новое соединение;

isConnected()       возвращающий логическое зна­чение true, если сокет подключен к серверу;

isBound()           возвращающий ло­гическое значение true, если сокет привязан к адресу;

isClosed()          возвращающий логическое значение true, если сокет закрыт.

close()             Чтобы закрыть со­кет, достаточно вызвать etot метод. Закрытие сокета приводит также
                    к закры­тию связанных с ним потоков ввода-вывода.

Socket () 1.1
                    Создает сокет, который еще не соединен в данный момент времени.

void connect(SocketAddress address) 1.4
                    Соединяет данный сокет по указанному адресу.

void connect (SocketAddress address, int timeoutlnMilliseconds) 1.4
                    Соединяет данный сокет по указанному адресу или осуществляет возврат, если заданный
                    промежуток времени истек.

void setSoTixneout(int timeoutlnMilliseconds) 1.1
                    Задает время блокировки для чтения запросов в данном сокете. По истечении времени
                    блокировки возникает исключение типа InterruptedlQException.

boolean isConnected() 1.4
                    Возвращает логическое значение true, если установлено соединение с сокетом.

boolean isClosedO 1.4
                    Возвращает логическое значение true, если разорвано соединение с сокетом.

----------------------------------------------------------------------------------------------------------------------
*/
