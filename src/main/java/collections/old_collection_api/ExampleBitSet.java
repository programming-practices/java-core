package collections.old_collection_api;

import java.util.BitSet;

public class ExampleBitSet {
    public static void main(String[] args) {
//---------------------------------------------------------------------------------------------------------------------
        // BitSet Demonstration.
        BitSet bits1 = new BitSet(16);
        BitSet bits2 = new BitSet(16);

        // set some bits
        for (int i = 0; i < 16; i++) {
            if ((i % 2) == 0) bits1.set(i);
            if ((i % 5) != 0) bits2.set(i);
        }

        System.out.println("Initial pattern in bits1: ");
        System.out.println(bits1);
        System.out.println("\nInitial pattern in bits2: ");
        System.out.println(bits2);

        // AND bits  &&
        bits2.and(bits1);
        System.out.println("\nbits2 AND bits1: ");
        System.out.println(bits2);

        // OR bits  ||
        bits2.or(bits1);
        System.out.println("\nbits2 OR bits1: ");
        System.out.println(bits2);

        // XOR bits  ^
        bits2.xor(bits1);
        System.out.println("\nbits2 XOR bits1: ");
        System.out.println(bits2);
//---------------------------------------------------------------------------------------------------------------------
//        Stream<BitSet> stream = null;
//        BitSet result = stream.collect(BitSet::new, BitSet::set, BitSet::or);
//---------------------------------------------------------------------------------------------------------------------
    }
}


/*
-----------------------------------------------------------------------------------------------------------------------
В классе BitSet на платформе Java хранятся последовательности битов. (Это не
множество в математическом смысле. Битовый вектор, или битовый массив, — воз­
можно, более подходящий для этого термин.) Битовое множество применяется в тех
случаях, когда требуется эффективно хранить последовательность битов (например,
признаков или флагов). А поскольку битовое множество упаковы вает биты в байты,
то пользоваться им намного эффективнее, чем списочным массивом типа ArrayList
с объектами типа Boolean.
Класс BitSet предоставляет удобный интерфейс для чтения, установки или пере­
установки отдельных битов. Применяя этот интерфейс, можно избежать маскирова­
ния или других операций с битами, которые потребовались бы, если бы биты храни ­
лись в переменных типа long.
Например, в результате вызова bucketOfBits.get (i) для объекта bucketOfBits
типа BitSet возвращается логическое значение true, если i-й бит установлен, а ина­
че — логическое значение false. Аналогично в результате вызова bucketOfBits.
set(i) устанавливается i-й бит. И наконец, в результате вызова bucketOfBits.
clear (i) сбрасывается i-й бит.
-----------------------------------------------------------------------------------------------------------------------
Этот класс служит для создания специального типа массива, содержащего би­
товые значения в виде логических значений. Размер массива типа Bi t S e t можно,
если требуется, увеличивать. Благодаря этому он становится похожим на битовый
вектор. Ниже приведены конструкторы к.Л асса B i t S e t .
BitSet()
BitSet(int раs.мер)
В первой форме конструктора создается объект по умолчанию. А вторая форма
позволяет указать начальный размер (т.е. количество битов, которые можно со­
хр анить) . Все биты инициируются логическими значениями fa l s e .
-----------------------------------------------------------------------------------------------------------------------
•
BitSet(int initialCapacity)
Конструирует битовое множество.
•
int length ()
Возвращает “логическую длину” битового множества: 1 + индекс самого старшего установленного бита.
•
boolean get (int bit)
Получает бит.
•
void set (int bit)
Устанавливает бит.
•
void clear (int bit)
Сбрасывает бит.
•
void and (BitSet set)
Выполняет логическую операцию И над данным и другим битовым множеством.
•
void or (BitSet set)
Выполняет логическую операцию ИЛИ над данным и другим битовым множеством.
•
void xor (BitSet set)
Выполняет логическую операцию исключающее ИЛИ над данным и другим битовым множеством.
•
void andNot (BitSet set)
Сбрасывает все биты данного битового множества, установленные в другом битовом множестве.
-----------------------------------------------------------------------------------------------------------------------
void and (Bi tSet множество_битов) Выполняет логическую операцию И над содержи·
мым вызывающего объекта типа BitSet и заданного
множества_битов. Результат размещается в вызыва­
ющем объекте
void andNot (BitSet множество_ Для каждого бита, установленного в заданном
множе;стве_битов, сбрасывается соответствующий
бит в вызывающем объекте типа Bi tSet
int cardinali ty ( ) Возвращает количество установленных битов в вы­
зывающем объекте
битов)
void clear ( ) Устанавливает все биты в нуль
void clear (int индекс) Устанавливает в нуль бит по указанному U1«Эекq
void clear ( int началъный_индекс, Устанавливает в нуль биты от позиции начальный_
uндексдо позиции конечный_индекс-1
int конечный_индекс)
OЬject clone ( )
Ьoolean equals (OЬject
битов)
Дублирует вызывающий объект
множество_ Возвращает логическое значение true, если вызы­
вающее множество битов равнозначно заданному
множеству_битов, а иначе - логическое значение
false
void flip (int ишkкс)
Обращает бит по указанному и ндекq
void :fli.p (int начальный_инiJекс,
int КfJНеЧНfJtй_инiJекс)
Ьoolean qet (int индекс) Обращает биты от позиции нача!lЬНЬl й_индексдо по­
зиции конечный_uпдекс-1
BitSet qet ( int начальный_индекс,
int конечнь�й_индекс) Возвращает объект типа Bi tSet, состоящий из бит
от позиции нача!lЬНЬlй_инде�а:до позиции �­
индекс-1. Вызывающий объект не изменяется
int haвhCocle ( )
Ьoolean interвectв (BitSet
мнwкество_битов) Возвращает хеш·код вызывающего объекта
Ьoolean iвl:Japty ( ) Возвращает логическое значение true, если все
биты вызывающего объекта сброшены
int lenqth ( ) Возвращает количество битов, требующихся
для хранения содержимого вызывающего объекта
типа BitSet. Это значение определяется по положе­
нию последнего установленного бита
int nextClearBit ( int НФШЛЬный_
индекс) Возвращает позицию следующего сброшенного бита
(имеющего логическое значение falвe), начиная
с указанной позиции начальнь�й_индекс
int nextSetвit (int начальный_
индекс) Возвращает позицию следующего установленного
бита ( имеющего логическое значение true), начи­
ная с указанной позиции начальный_инitекс. Если ни
один из битов не установлен, возвращается значе­
ние -1
void or (Bitset множество_битов) Выполняет логическую операцию ИЛИ над содер­
жимым вызывающего объекта класса Bi tSet и за­
данного JIOIOЖf!Cl1/8Q _бumoв. Результат размещается
в вызывающем объекте
int previouвClearBit (int
НФШЛЬный_индекс) Возвращает позицию следующего сброшенного
бита (имеющего логическое значение falae), рас­
положенную до заданной позиции НilЧО.4ЬШ>lil_индеlа:
включительно. Если сброшенный бит не найден,
возвращается значение -1
int previouвSetвit (int Возвращает позицию следующего установленного
бита ( имеющего логическое значение true), рас­
положенную до заданной позиции НJl'IШIЬНЬlй_индеlа:
включительно. Если устаноаленный бит не найден,
возвращается значение -1
началЫ1Ь1й_индекс)
индекс,
Возвращает логическое значение true, если уста­
новлена хотя бы одна пара соответствующих битов
в вызывающем объекте и заданном множеаnве _бuтов
Устанааливает бит по указанному и ндексу
void веt ( int инде�а:)
void set (int
Возвращает текущее значение бита по указанному
�
Ьoolean v)
Устанавливает бит по указанному � равным за­
данному значению параметра v. Если этот параметр
принимает логическое значение true, то бит уста­
навливается, а если он принимает логическое значе­
ние false, то бит сбрасывается
void set (int НllЧO.l й
int конгчный_индехс)
void set (int НDЧ411Ыf&1й_инiJекс,
int конечный_индекс, Ьoolean v)
Устанавливает биты ar позиции начальный_индекt:
ДО ПОЗИЦИИ
конечный_индекс-1
Устанавливает биты ar позиции на'lаJlf>НЬlй_индекс
до позиции конечный_uндекс-1 равными заданному
значению параметра v. Если этаr параметр прини­
мает логическое значение true, то биты устанавли­
ваются, а если он принимает логическое значение
fal-. то биты сбрасываются
int size ( ) Возвращает количество битов в вызывающем объ­
екте типа Bi tSet
IntStreaia streua О Возвращает паrок ввода-вывода, содержащий пози­
ции всех установленных битов: от младшего до стар­
шего (добавлен в версииJDК 8)
Ьуtе [ ] toВyteArray ( ) Возвращает массив типа Ьуtе, который содержит
вызывающий объект типа Bi tSet
lonq [ ) toLongArray ( ) Возвращает массив типа lonq, кmорый содержит
вызывающий объект типа BitSet
Strinq toString ( ) Возвращает строковый эквивалент вызывающего
объекта типа Вitset
static BitSet valueOf (Ьyt.e [ ] v) Возвращает объект типа Bi tSet, содержащий биты
из указанного массива v
static ВitSet
valueOf (Вytduffer v) Возвращает объект типа Bi tset, содержащий биты
из указанного буфера v
static BitSet valueOf (lonq [ ] v) Возвращает объект типа Bi tSet, содержащий биты
из указанного массива v
static BitSet Возвращает объект типа Bi tSet, содержащий биты
из указанного буфера v
valueOf (LonqBuffer v)
void xor (BitSet МШJЖество_битов)
Выполняет логическую операцию исключающее
ИЛИ над содержимым вызывающего объекта типа
Bi tSet и заданного .мньжесmва_битов. Результат раз­
мещается в вызывающем объекте
-----------------------------------------------------------------------------------------------------------------------

*/