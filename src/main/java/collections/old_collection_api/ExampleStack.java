package collections.old_collection_api;

import java.util.EmptyStackException;
import java.util.Stack;

public class ExampleStack {
    public static void main(String[] args) {
//---------------------------------------------------------------------------------------------------------------------
        // Demonstrate the Stack class.

        Stack<Integer> st = new Stack<>();

        System.out.println("1 -----------------------------------------------");
        System.out.println("stack: " + st);
        System.out.println("2 -----------------------------------------------");
        StackDemo.showpush(st, 42);
        System.out.println("3 -----------------------------------------------");
        StackDemo.showpush(st, 66);
        System.out.println("4 -----------------------------------------------");
        StackDemo.showpush(st, 99);
        System.out.println("5 -----------------------------------------------");
        StackDemo.showpop(st);
        System.out.println("6 -----------------------------------------------");
        StackDemo.showpop(st);
        System.out.println("7 -----------------------------------------------");
        StackDemo.showpop(st);

        try {
            StackDemo.showpop(st);
        } catch (EmptyStackException e) {
            System.out.println("empty stack");
        }
//---------------------------------------------------------------------------------------------------------------------
    }
}

class StackDemo {
    static void showpush(Stack<Integer> st, int age) {
        st.push(age);
        System.out.println("push(" + age + ")");
        System.out.println("stack: " + st);
    }

    static void showpop(Stack<Integer> st) {
        System.out.print("pop -> ");
        Integer age = st.pop();
        System.out.println(age);
        System.out.println("stack: " + st);
    }

}
/*
------------------------------------------------------------------------------------------------------------------------------------------
Начиная с версии 1.0, в стандартную библиотеку Java входит класс Stack с хорошо
известными методами push () и pop ( ) . Но класс Stack расширяет класс Vector, что
неудовлетворительно с теоретической точки зрения, поскольку в нем допускаются опе­
рации, не характерные для стека. Например, вызывая методы insert () и remove О,
можно вводить и удалять значения откуда угодно, а не только из вершины стека.
------------------------------------------------------------------------------------------------------------------------------------------
Класс S t a c k является производным от класса Ve c t o r и реализует стандарт­
ный стек, действующий по принципу "последним пришел - первый обслужен". В
классе S t a c k определяется только конструктор по умолчанию, создающий пустой
стек. В версии JDК 5 класс S t a c k был переделан под синтаксис обобщений
------------------------------------------------------------------------------------------------------------------------------------------
 Stack — данная коллекция является расширением коллекции Vector. Была добавлена в Java 1.0 как реализация стека LIFO (last-in-first-out). Является частично синхронизированной коллекцией (кроме метода добавления push()). После добавления
 в Java 1.6 интерфейса Deque, рекомендуется использовать именно реализации этого интерфейса, например ArrayDeque.
------------------------------------------------------------------------------------------------------------------------------------------
Следует также заметить, что класс S t a c k по-прежнему рекомендуется для упо­
требления. Тем не менее вместо него лучше выбрать класс Arra yDeque .
------------------------------------------------------------------------------------------------------------------------------------------
•
E push(E item)
Помещает заданный элемент item в стек и возвращает его.
•
Е pop()
Извлекает и возвращает элемент из вершины стека. Этот метод не следует вызывать, если стек пуст.
•
Е реек()
Возвращает элемент, находящийся на вершине стека, не извлекая его. Этот метод не следует вы­
зывать, если стек пуст.
------------------------------------------------------------------------------------------------------------------------------------------


*/
