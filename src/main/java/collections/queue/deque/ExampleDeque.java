package collections.queue.deque;

import java.util.Deque;
import java.util.LinkedList;

public interface ExampleDeque {
    public static void main(String[] args) {
        Deque<String> deque = new LinkedList<>();
    }
}

/*
------------------------------------------------------------------------------------------------------------------------
Двухсторонняя очередь, поддерживает добавление и удаление элементов с обоих концов. Расширяет Queue интерфейс.
------------------------------------------------------------------------------------------------------------------------
Интерфейс Dequeue расширяет интерфейс Queue и определяет поведение дву­
сторонней очереди, которая может функционировать как стандартная очередь
по принципу "первым вошел - первым обслужен" или как стек по принципу "по­
следним вошел - первым обслужен". Интерфейс Dequeue является обобщенным
и объявляется приведенным ниже образом, где Е обозначает тип объектов, кото­
рые будет содержать двусторонняя очередь.
interf ace Deque<E>
Помимо методов, наследуемых из интерфейса Que u e , в интерфейсе Dequeue
определяются методы, перечисленные в табл. 18. 7. Некоторые и;1 этих методов гене­
ри руютисключение типа С l а s sСаs tExcept i on , если заданный объект несовместим
с :элементами двусторонней очереди. Исключение типа Nu l l Po i n t e r Excep t i on
генерируется , когда предпринимается попытка сохранить пустой объект, а пустые
элементы двусторонней очереди не допускаются. При указании неверного аргумен­
та генерируется исключение тина I 1 l ega lArg irnen tExcep t i on. Исключение типа
I l lega l S t a te Except ion генерируется при попытке ввести объект в заполнен­
ную двустороннюю очередь фиксированной длины. И наконец, исключение типа
NoSuchElernentExcep t i o n генерируется при попытке удалить элемент из пустой очереди
------------------------------------------------------------------------------------------------------------------------
Как упоминалось выше, обычная (односторонняя) очередь позволяет эффективно вводить элементы в свой хвост и удалять элементы
из своей головы, а двухсторонняя очередь — вводить и удалять элементы на обоих своих концах, хотя ввод элементов в середине
очереди не поддерживается. В версии Java SE 6 появился интерфейс Deque, реализуемый классами A r r ayDeq ue и LinkedList,
причем оба класса предоставляют двухстороннюю очередь, которая может расти по мере надобности. В главе 14 будут приведены
примеры применения ограниченных одно- и двухсторонних очередей.
------------------------------------------------------------------------------------------------------------------------
void addFirst(Е объект)         Вводит заданный объект в г о л о в у двусторонней очеред и .
                                Генерирует исключение типа I l legalS tateException, если
                                в очереди фиксированной длины н ет свободного места

void addLast(Е объект)          Вводит заданный объект в хвост двусторонней очереди .
                                Генерирует исключение типа I l lega l S tateException, если
                                в очереди фиксированной длины нет с в о бодн о г о места

I terator<E> descendingiterator()
                                Возвр а щает итератор для обхода элеме нтов от хвоста к го­
                                лове двусторонней очереди . И н ы м и словам и , возвращает
                                обратный итератор

Е getFirst()                    Возвращает первый элемент двусторон ней очереди.
                                Возвращ ае м ы й элемент из очереди не улаляется. Генерирует
                                исключение типа NoSuchElementException, если двусто­
                                ронняя очередь пуста

Е getLast()                     Возвращает последний элемент двусторонней очереди.
                                Возвращаем ы й элемент из очереди не удаляется . Генерирует
                                искл ю чение типа NoSuchElementException, есл и двусто­
                                ронняя очередь пуста

boolean offerFirst(E об5екm)    Пытается ввести зада н н ы й обr.ект в голову двусторонней
                                очереди. Возвращает логи ческое значение true, есл и объект
                                введен , а и наче - логи ческое значение false. Таким обра­
                                зом , этот метод возвращает логи ческое значение fal se п ри
                                попытке ввести заданный объект в за п олненную двусторон­
                                н ю ю очередь фиксированной дли н ы

Ьoolean offerLast(Е об5екm)     Пытается ввести заданный объект в хвост двусторонней
                                очереди . Возвращает логическое значение true, есл и объект
                                введен , а и наче - логическое зн а чение fal se

Е peekFirst()                   Возвращ ает элемент, н аходящийся в голове двусторонней
                                очереди . Если очередь пуста. возвращает пустое значение
                                null. Возвращаемый элемент из очереди не удаляется

Е peekLast()                    Возвращает элемент, находящийся в хвосте двусторонней
                                очереди. Если очередь пуста, возвращает пустое значение
                                null. Возвра щаемый элемент из очереди не удаляется

Е pollFirst()                   Возвращает элемент, находящийся в голове двусторонней
                                очереди, одновременно удаляя его из очереди . Если очередь
                                пуста, возвращает пустое значение null

Е pollLast()                    Возвращает элемент, н аходящийся в хвосте двусторонней
                                очереди , одновременно удаляя его из очереди . Если очередь
                                пуста, возвращает пустое значение null

Е рор()                         Возвращает элемент, н аходящийся в голове двусторонней
                                очереди, одновременно удаляя его из очереди. Генерирует
                                исключение типа NoSuchElementException, если очередь пуста

void push(E об&екm)             Вводит заданный объект в голову двусторонней очереди.
                                Если в очереди фиксированной дли н ы нет свободного ме­
                                ста, генерирует искл ю чение типа I llegalS tateException

Е reшoveFirst()                 Возвращает элемент из головы двусторонней очереди, одно­
                                временно удаляя его из очереди. Генерирует исключение
                                типа NoSuchE181118ntException, если очередь пуста

Ьoolean removeFirstOccurrence(OЬject об6екm)
                                Удаляет первый экземпляр заданного объехта из очереди.
                                Возвращает логическое значение true при удачном исходе
                                операции, а если двусторонняя очередь не содержит задан­
                                ный о6&ект - логическое значение false

Е removeLast()                  Возвращает элемент из хвоста двусторонней очереди, одно­
                                временно удаляя его из очереди. Генерирует исключение
                                типа NoSuchEleшentException, если очередь пуста

boolean reшoveLastOccurrence(Object об6екm)
                                Удаляет последний экземпляр заданного объехта из очереди.
                                Возвращает логическое значение true при удачном исходе
                                операции, а если двусторонняя очередь не содержит задан­
                                ный об&ект - логическое значение false

•void addFirst(E element)
•void addLast(E element)
•boolean offerFirst(E element)
•boolean offerLast(E element)
    Вводят заданный элемент в голове или в хвосте двухсторонней очереди. Если очередь заполнена, первые два метода генерируют
    исключение типа HlegalStateException, тогда как последние два возвращают логическое значение false.

•Е removeFirst()
•Е removeLast()
•Е pollFirst()
•Е pollLast()
    Удаляют и возвращают элемент из головы очереди, если очередь не пуста. Если ж е она пуста, то первые два метода генерируют
    исключение типа NoSuchElementException, тогда как последние два возвращают пустое значение null.

•Е getFirst()
•Е getLast()
•Е peekFirst()
•Е peekLast()
    Возвращают элемент из головы очереди, не удаляя ее, если очередь не пуста. Если же она пуста, первые два метода генерируют
    исключение типа NoSuchElementException, тогда как последние два возвращают пустое значение null.
------------------------------------------------------------------------------------------------------------------------
*/
