package collections.set;

import java.util.LinkedHashSet;

public class ExampleLinkedHashSet {
    public static void main(String[] args) {
//----------------------------------------------------------------------------------------------------------------------------------------
        // Create age hash set.
        LinkedHashSet<String> linkedHashSet = new LinkedHashSet<String>() {

        };
//        LinkedHashSet<String> linkedHashSet = new LinkedHashSet<String>();

        // Add elements to the hash set.
        linkedHashSet.add("Beta");
        linkedHashSet.add("Alpha");
        linkedHashSet.add("Eta");
        linkedHashSet.add("Gamma");
        linkedHashSet.add("Epsilon");
        linkedHashSet.add("Omega");

        System.out.println(linkedHashSet);
//----------------------------------------------------------------------------------------------------------------------------------------
    }
}

/*
-----------------------------------------------------------------------------------------------------------------------------------------
!!! nawchot LinkedHashSet nado ytochnit
Ostorozno zdes esli nado zberihat class "zdelanui vlasnorychno" v LinkedHashSete()
to nado realizovat metod hashCode(), potomy chto esli ne realizovat metod hashCode() to
ne polychica soxranennie v vide xewei a v vide sviaznoho spiska (polychitsa chtoto poxozoe na LinkedList)
-----------------------------------------------------------------------------------------------------------------------------------------
ВНИМАНИЕ! Будьте внимательны и аккуратны, изменяя элементы хеш-множества. Если хеш-код элемента изменится, этот элемент
уже не будет находиться на правильной позиции в структуре данных.
-----------------------------------------------------------------------------------------------------------------------------------------
 LinkedHashSet — отличается от HashSet только тем, что в основе лежит LinkedHashMap вместо HashMap.
 Благодаря этому отличию порядок элементов при обходе коллекции является идентичным порядку добавления элементов.
-----------------------------------------------------------------------------------------------------------------------------------------
НА ЗАМЕТКУ! Начиная с версии Java SE 8, вместо связных списков в заполненных группах приме­
няются сбалансированные двоичные деревья. Благодаря этому повышается производительность,
если в результате неудачно выбранной хеш-функции возникает немало конфликтов или же если
в злонамеренном коде предпринимается попытка заполнить хеш-таблицу многими значениями
с одинаковыми хеш-кодами.
-----------------------------------------------------------------------------------------------------------------------------------------
•
LinkedHashSet()
•
LinkedHashSet (int ini tialCapaci ty)
•
LinkedHashSet (int initialCapacity, float loadFactor)
Конструируют пустое связное хеш-множество заданной емкости с указанным коэффициентом за­
грузки.
-----------------------------------------------------------------------------------------------------------------------------------------
*/