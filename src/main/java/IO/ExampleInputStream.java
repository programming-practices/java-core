package IO;

public class ExampleInputStream {
    public static void main(String[] args) {

    }
}

/*
-----------------------------------------------------------------------------------------------------------------------
В классе InputStream имеется следующий абстрактный метод:
                abstract int read()
Этот метод читает один байт и возвращает считанный байт или значение -1, если обнаруживается конец источника ввода. Разработчик
конкретного класса потока ввода может переопределить этот метод таким образом, чтобы он предоставлял какую-нибудь полезную
функциональную возможность.
Как методы read (), так и методы write () блокируют доступ до тех пор, пока байты не будут фактически считаны или записаны.
Это означает, что если к потоку ввода-вывода не удается получить доступ немедленно (что обычно случается из-за занятости
сетевого соединения), происходит блокирование текущего потока исполнения. А это дает другим потокам исполнения возможность
выполнять какую-нибудь полезную задачу, в то время как метод ожидает, когда поток ввода-вывода станет снова доступным.
По завершении чтения или записи данных в поток ввода-вывода его следует закрыть, вызвав метод closet). Такой вызов приводит
к освобождению системных ресурсов, доступных в ограниченном количестве. Если же в прикладной программе открывается слишком
много потоков ввода-вывода без последующего их закрытия, ресурсы системы могут исчерпаться. Кроме того, закрытие потока вывода
приводит к очистке использовавшегося для него буфера: все байты, которые временно размещались в этом буфере с целью их
последующей доставки в виде более крупного пакета, рассылаются по местам своего назначения. Так, если не закрыть файл,
последний пакет байтов может так никогда и не быть доставлен. Очистить буфер от выводимых данных можно и вручную с помощью
метода flush().
-----------------------------------------------------------------------------------------------------------------------
• abstract int read()
    Считывает байт данных и возвращает его. По достижении конца потока возвращает значение -1.

• int read (byte [] b)
    Считывает данные в байтовый массив и возвращает фактическое количество считанных байтов или значение -1, если достигнут
    конец потока ввода. Этот метод позволяет считать максимум Ъ. length байтов.

• int read (byte [] Ъ, int off, int len)
    Считывает данные в байтовый массив. Возвращает фактическое количество считанных байтов или значение -1, если достигнут
    конец потока ввода.
                Параметры: b        Массив, в который должны считываться данные
                           off      Смещение в массиве Ь, обозначающее позицию, с которой должно начинаться размещение в нем байтов
                           Ien      Максимальное количество считываемых байтов

• long skip (long n)
    Пропускает л байтов в потоке ввода. Возвращает фактическое количество пропущенных байтов (которое может оказаться меньше
    n если достигнут конец потока).

• int available ()
    Возвращает количество байтов, доступных без блокирования. [Напомним, что блокирование
    означает потерю текущим потоком исполнения своей очереди на выполнение.)

• void close ()
    Закрывает поток ввода.

• void mark (int readlimit)
    Устанавливает маркер на текущей позиции в потоке ввода. (Не все потоки поддерживают такую функциональную возможность.)
    Если из потока ввода считано байтов больше заданного предела readlimit, в потоке ввода можно пренебречь устанавливаемым маркером.

• void reset()
    Возвращается к последнему маркеру. Последующие вызовы метода read() приводят к повторному считыванию байтов. В отсутствие
    текущего маркера поток ввода не устанавливается в исходное положение.

• boolean markSupported()
    Возвращает логическое значение true, если в потоке ввода поддерживается возможность устанавливать маркеры.
-----------------------------------------------------------------------------------------------------------------------
*/