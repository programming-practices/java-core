package oop;


public class ExampleInitializationBlocks extends Parent {
    public static void main(String[] args) {
//--------------------------------------------------------------------------------------------------------------------
        new Child();
//--------------------------------------------------------------------------------------------------------------------
        System.out.println();
        new InitializationBlocks("Carlos", 50_000);
//--------------------------------------------------------------------------------------------------------------------
        System.out.println();
        new Hello();
//--------------------------------------------------------------------------------------------------------------------
    }

}

class Hello {
    static {
        System.out.println("Hello");
    }
}

class Parent_A {
    static {
        System.out.println("Static block parent!!!");
    }

    {
        System.out.println("Block parent!!!");
    }

    public Parent_A() {
        System.out.println("Constructor classa parenta!!!");
    }
}

class Child extends Parent_A {
    static {
        System.out.println("Static block Child!!!");
    }

    {
        System.out.println("Block Child!!!");
    }


    public Child() {
        System.out.println("Constructor classa Child!!!");
    }
}

class InitializationBlocks {
    /*Ранее мы рассмотрели два способа инициализации поля:
        • установка его значения в конструкторе;
        • присваивание значения при объявлении.
    На самом деле в Java существует еще и третий механизм: использование блока
    инициализации. Такой блок выполняется всякий раз, когда создается объект данного
    класса. Рассмотрим следующий пример кода:*/

    private static int nextld;

    // static block vupolnitsa pered normalnum blokom i pered constructorom
    static {
        System.out.println("Static Block");
    }

    private int id;
    private String name;

    /*В этом примере начальное значение поля id задается в блоке инициализации объек­
    та, причем неважно, какой именно конструктор используется для создания экземпляра
    класса. Блок инициализации выполняется первым, а вслед за ним — тело конструктора.
    Этот механизм совершенно не обязателен и обычно не применяется. Намного чаще при­
    меняются более понятные способы задания начальных значений полей.*/

    /*НА ЗАМЕТКУ! В блоке инициализации допускается обращение к полям, определения которых нахо­дятся после данного блока.
    Несмотря на то что инициализация полей, определяемых после блока, формально допустима, поступать так не рекомендуется
    во избежание циклических определений. Конкретные правила изложены в разделе 8.3.2.3 спецификации Java
    (http://docs.oracle.com/javase/specs). Эти правила достаточно сложны, и учесть их в реализации компилятора крайне
    трудно. Так, в ранних версиях компилятора они были реализованы не без ошибок. Поэтому в исходном коде блоки
    инициализации рекомендуется размещать после определений полей.*/

    // ne vazno v kakom meste naxoditsa block inicializacii on vupolnitsa pered vupolneniem constructora
//    // блок инициализации
//    {
//        id = nextld;
//        nextld++;
//        System.out.println("Block");
//    }
    private double salary;

    // ne vazno v kakom meste naxodtsa block inicializacii on vupolnitsa pered vupolneniem constructora
    // блок инициализации
    {
        id = nextld;
        nextld++;
        System.out.println("Block");
    }

    public InitializationBlocks(String aName, double aSalary) {
        name = aName;
        salary = aSalary;
        System.out.println("Constructor");
    }

    /*Статическая инициализация выполняется в том случае, если класс загружается впервые. Аналогично полям экземпляра,
    статические поля принимают значения 0, false или null, если не задать другие значения явным образом. Все операторы,
     зада­ющие начальные значения статических полей, а также статические блоки инициали­зации выполняются в порядке их
     перечисления в объявлении класса.*/

    public InitializationBlocks() {
        name = "";
        salary = 0;
        System.out.println("constructor");
    }
}

/*
----------------------------------------------------------------------------------------------------------------------
При таком многообразии способов инициализации полей данных довольно труд­но отследить все возможные пути процесса
конструирования объектов. Поэтому рас­смотрим подробнее те действия, которые происходят при вызове конструктора.
1. Все поля инициализируются значениями, предусмотренными по умолчанию(0,false или null).
2. Инициализаторы всех полей и блоки инициализации выполняются в порядке их следования в объявлении класса.
3. Если в первой строке кода одного конструктора вызывается другой конструк­тор, то выполняется вызываемый конструктор.
4. Выполняется тело конструктора.
----------------------------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------------------------
*/
