package Examples.OOP;

public class ExampleAutoboxingUnboxing {
    public static void main(String[] args) {
//--------------------------------------------------------------------------------------------------------------------
        int x = 3;
        x += 3.5d;  // pereobrazyetsa v int
        System.out.println(x);
//--------------------------------------------------------------------------------------------------------------------
        /*Автоматическая упаковка и распаковка примитивных типов может выполняться
        и при вычислении арифметических выражений. Например, операцию инкремента
        можно применить к переменной, содержащей ссылку на объект типа Integer, как
        показано ниже.*/
        Integer n = 3;
        n++;
        System.out.println(n);
//--------------------------------------------------------------------------------------------------------------------
        /*А если в условном выражении употребляются типы Integer и Double, то значе­ние типа Integer распаковывается,
        продвигается к типу Double и снова упаковывает­ся, как демонстрируется в следующем фрагменте кода:*/
        Integer n1 = 1;
        Double х = 2.0;
        System.out.println(true ? n1 : x); // выводится значение 1.0
//--------------------------------------------------------------------------------------------------------------------
        // An error produced by manual unboxing.
        Integer iOb = 1000; // autobox the value 1000

        int i = iOb.byteValue(); // manually unbox as byte !!!
        int i1 = iOb.intValue();


        System.out.println(i);  // does not display 1000 !
        System.out.println(i1);
//--------------------------------------------------------------------------------------------------------------------
    }
}

/*
----------------------------------------------------------------------------------------------------------------------
НА ЗАМЕТКУ! Спецификация автоупаковки требует, чтобы значения типа boolean, byte, char меньше 127, а также значения
типа short и int в пределах от -128 до 127 упаковывались в фиксированные объекты. Так, если переменные а и b из
предыдущего примера инициализиро­вать значением 100, их сравнение должно дать положительный результат.
----------------------------------------------------------------------------------------------------------------------
И наконец, следует заметить, что за упаковку и распаковку отвечает не виртуаль­ная машина, а компилятор. Он включает в
программу необходимые вызовы, а вирту­альная машина лишь выполняет байт-код.
----------------------------------------------------------------------------------------------------------------------
ВНИМАНИЕ! Некоторые считают, что с помощью классов объектных оболочек можно реализовать методы, модифицирующие свои
числовые параметры. Но это неверно. Как пояснялось в главе 4, на Java нельзя написать метод, увеличивающий целое число,
передаваемое ему в качестве пара­метра, поскольку все параметры в этом языке передаются только по значению.
    public static void triple(int x) // не сработает!
    {
        x++; // попытка модифицировать локальную переменную
    }

Но, может быть, это о граничение удастся обойти, используя вместо типа int класс integer, как показано ниже?
    public static void triple(Integer x) // все равно не сработает!
    {
        ...
    }

Дело в том, что объект типа integer н е позволяет изменять содержащиеся в нем данные. Сле­довательно, изменять числовые
параметры, передаваемые методам, с помощью классов объект­ных оболочек нельзя.

Если все-таки требуется создать метод, изменяющий свои числовые параметры, для этого можно воспользоваться одним из
контейнерных типов, определенных в пакете org.omg.CORBA. К та­ким типам относятся IntHolder, BooleanHolder и др. Каждый
такой тип содержит открытое (sic!) поле value, через которое можно обращаться к хранящемуся в нем числу, как показано ниже.
    public static void triple(IntHolder x)
    {
        x.value++;
    }
----------------------------------------------------------------------------------------------------------------------
*/