package oop;

public interface ExampleInterface {
    public static void main(String[] args) {
//---------------------------------------------------------------------------------------------------------------------
        new Dog().method01();
        new Dog().method02();

        System.out.println();
        System.out.println(((InterfaceA) new Dog()).text);
        System.out.println(((InterfaceB) new Dog()).text);
//        System.out.println((new Dog()).text);  // a tak bude error
//        System.out.println((new Dog()).text);  // a tak bude error
        System.out.println();

//        ((InterfaceA) new Dog()).text = "new";
//---------------------------------------------------------------------------------------------------------------------
        MyClass ob = new MyClass();
        ob.meth1();
        ob.meth2();
        ob.meth3();
//---------------------------------------------------------------------------------------------------------------------
    }


}

//---------------------------------------------------------------------------------------------------------------------
// One interface an extend another.
interface Aq {
    void meth1();

    void meth2();
}

// B now includes meth1() and meth2() -- it adds meth3().
interface Bq extends Aq {
    void meth3();
}

interface InterfaceA {
    String text = "a";
}

//---------------------------------------------------------------------------------------------------------------------

interface InterfaceB {
    String text = "b";
}

//interface InterfaceB {
//    String text = "b";
//}

// This class must implement all of A and B
class MyClass implements Bq {
    public void meth1() {
        System.out.println("Implement meth1().");
    }

    public void meth2() {
        System.out.println("Implement meth2().");
    }

    public void meth3() {
        System.out.println("Implement meth3().");
    }
}

class ClassA {
    String text = "a";
}

//class Dog implements InterfaceA,InterfaceB {
class Dog extends ClassA implements InterfaceB, InterfaceA {
    public void method01() {
        InterfaceB interfaceB = new Dog();
        System.out.println((interfaceB.text));
    }

//    public void method02(){
//         InterfaceA interfaceA = new ExampleInterface();
//         System.out.println((interfaceA.text));
//    }

    public void method02() {
        ClassA classA = new Dog();
        System.out.println((classA.text));
    }
}
/*
----------------------------------------------------------------------------------------------------------------------
Интерфейс в Java не является классом. Он представляет собой ряд требований, предъ­являемых к классу, который должен
соответствовать интерфейсу. Как правило, один разработчик, собирающийся воспользоваться трудами другого разработчика
для реше­ния конкретной задачи, заявляет: "Если ваш класс будет соответствовать определенному интерфейсу, я смогу решить
свою задачу".
----------------------------------------------------------------------------------------------------------------------
Как и методы, поля констант в интерфейсах автоматически становятся открыты­ми. А кроме того, они являются статическими
и конечными (т.е. имеют по умолча­нию модификаторы доступа public static final).
----------------------------------------------------------------------------------------------------------------------
Начиная с версии Java SE 8, в интерфейсы разрешается вводить статические ме­тоды. Формальных причин, по которым в
интерфейсе не могли бы присутствовать статические методы, никогда не существовало. Но такие методы не согласовывались
с представлением об интерфейсах как об абстрактных спецификациях. В прошлом статические методы зачастую определялись в
дополнительном клас­се, сопутствующем интерфейсу. В стандартной библиотеке Java можно обнаружить пары интерфейсов и
служебных классов, например Collection/Collections или Path/Paths. Такое разделение больше не требуется.
----------------------------------------------------------------------------------------------------------------------
Для того чтобы класс реализовал интерфейс, нужно выполнить следующие дей­ствия.
    1. Объявить, что класс реализует интерфейс.
    2. Определить в классе все методы, указанные в интерфейсе.
----------------------------------------------------------------------------------------------------------------------
Но важнее не это, а то, что интерфейсы не могут предоставить. В частности, у них отсутствуют поля экземпляра.
----------------------------------------------------------------------------------------------------------------------
До версии Java SE 8 в интерфейсах нельзя было реализовывать методы, но теперь они могут предоставлять простые методы.
----------------------------------------------------------------------------------------------------------------------
Все методы интерфейса автоматически считаются открытыми, поэтому, объявляя метод в интерфейсе, указывать модификатор
доступа public необязательно.
----------------------------------------------------------------------------------------------------------------------
НА ЗАМЕТКУ! Если указать ключевое слово p u b l i c при объявлении метода в интерфейсе, а поля
обозначить как p u b lic s t a tic fin a l, это не будет ошибкой. Некоторые программисты посту­
пают так по привычке или для того, чтобы исходные коды их программ были более удобочитаемы­
ми. Но в спецификации Java не рекомендуется употреблять лиш ние ключевые слова, и здесь мы
следуем этим рекомендациям.
----------------------------------------------------------------------------------------------------------------------
*/