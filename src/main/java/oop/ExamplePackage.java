package Examples.OOP;

public class ExamplePackage {
}


/*
---------------------------------------------------------------------------------------------------------------------
В языке Java можно и не применять механизм импорта, явно называя все пакеты, например java.util.Date.
А в C++ избежать использования директивы #include нельзя.
---------------------------------------------------------------------------------------------------------------------
НА ЗАМЕТКУ C++! Программирующие на C++ считают, что оператор import является аналогом
директивы #include. Но у них нет ничего общего. В языке C++ директиву #include приходится
применять в объявлениях внешних ресурсов потому, что компилятор C++ не просматривает файлы,
кроме компилируемого, а также файлы, указанные в самой директиве #include. А компилятор
Java просматривает содержимое всех файлов при условии, если известно, где их искать. В языке
Java можно и не применять механизм импорта, явно называя все пакеты, например java.util.
Date. А в C++ избежать использования директивы #include нельзя.
Единственное преимущество оператора import заключается в его удобстве. Он позволяет ис­
пользовать более короткие имена классов, не указывая полное имя пакета. Например, после
оператора import java.util.* (или import java.util.Date) к классу java.util.Date
можно обращаться по имени Date.
Аналогичный механизм работы с пакетами в C++ реализован в виде директивы namespace. Опе­
раторы package и import в Java можно считать аналогами директив namespace и using в C++.
---------------------------------------------------------------------------------------------------------------------
Если оператор package в исходном файле не указан, то классы, описанные в этом
файле, вводятся в пакет по умолчанию. У пакета по умолчанию нет имени.
---------------------------------------------------------------------------------------------------------------------
*/