package oop;

public class ExampleInteger {
    public static void main(String[] args) {
//--------------------------------------------------------------------------------------------------------------------
        // говорит о том, что значения Integer в диапазоне от -128 до 127 включительно кэшируются.
        Integer i = 56;
        Integer i2 = 56;
        System.out.println(i == i2);
        System.out.println(i.equals(i2));

        System.out.println();
        Integer t = 600;
        Integer t2 = 600;
        System.out.println(t == t2);
        System.out.println(t.equals(t2));
//--------------------------------------------------------------------------------------------------------------------
//        int value = -Integer.MAX_VALUE;
//        int value2 = Integer.MAX_VALUE;
//        System.out.println(value);
//        System.out.println(value2);
//--------------------------------------------------------------------------------------------------------------------
        Integer a = 127;
        Integer b = 127;
        Integer c = 128;
        Integer d = 128;
        System.out.println("a == b   " + (a == b));
        System.out.println("c == d   " + (c == d));
        System.out.println("a == d   " + (c == d));
//--------------------------------------------------------------------------------------------------------------------
        Integer v1 = 100;
        Integer v2 = new Integer(100);
        Integer v3 = Integer.parseInt("100");
        Integer v4 = Integer.valueOf("100");
        Integer v5 = Integer.valueOf(100);


//--------------------------------------------------------------------------------------------------------------------
    }
}

/*
----------------------------------------------------------------------------------------------------------------------
ВНИМАНИЕ! Некоторые считают, что с помощью классов объектных оболочек можно реализовать методы, модифицирующие свои
числовые параметры. Но это неверно. Как пояснялось в главе 4, на Java нельзя написать метод, увеличивающий целое число,
передаваемое ему в качестве пара­метра, поскольку все параметры в этом языке передаются только по значению.
    public static void triple(int x) // не сработает!
    {
        x++; // попытка модифицировать локальную переменную
    }

Но, может быть, это о граничение удастся обойти, используя вместо типа int класс integer, как показано ниже?
    public static void triple(Integer x) // все равно не сработает!
    {
        ...
    }

Дело в том, что объект типа integer н е позволяет изменять содержащиеся в нем данные. Сле­довательно, изменять числовые
параметры, передаваемые методам, с помощью классов объект­ных оболочек нельзя.

Если все-таки требуется создать метод, изменяющий свои числовые параметры, для этого можно воспользоваться одним из
контейнерных типов, определенных в пакете org.omg.CORBA. К та­ким типам относятся IntHolder, BooleanHolder и др. Каждый
такой тип содержит открытое (sic!) поле value, через которое можно обращаться к хранящемуся в нем числу, как показано ниже.
    public static void triple(IntHolder x)
    {
        x.value++;
    }
----------------------------------------------------------------------------------------------------------------------
•int intValue()
    Возвращает значение из данного объекта типа Integer в виде числового значения типа int (этотметод переопределяет
    метод intValue() из класса Nuiriber).

•static String toString(int i)
    Возвращает новый объект типа string, представляющий числовое значение в десятичной форме.

•static String toString(int i, int radix)
    Возвращает новый объект типа String, представляющий число в системе счисления, определяе­ мой параметром radix.

•static int parselnt(String s)
•static int parselnt (String s, int radix)
    Возвращают целое значение. Предполагается, что объект типа String содержит символьную стро­ку, представляющую целое
    число в десятичной системе счисления (в первом варианте метода) или же в системе счисления, которая задается
    параметром radix (во втором варианте метода).

•static Integer valueOf(String з)
•static Integer valueOf (String s, int radix)
    Возвращают новый объект типа Integer, инициализированный целым значением, которое зада­ется с помощью первого
    параметра. Предполагается, что объект типа string содержит символь­ную строку, представляющую целое число в
    десятичной системе счисления (в первом вариантеметода) или ж е в системе счисления, которая задается параметром
    radix (во втором вариантеметода).

•static m t compare (int x, int у) 1
    Возвращает:
        отрицательное целое значение если х < у
        нулевое значение — х = у
        а иначе — положительное целое значение.
----------------------------------------------------------------------------------------------------------------------
*/