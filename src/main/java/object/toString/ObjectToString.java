package object.toString;

// Override toString() for Box class.
public class ObjectToString {
    public static void main(String args[]) {

        ClassV classV = new ClassV(10, 12, 14);
        String str = "Box b: " + classV; // concatenate Box object

        System.out.println(classV); // convert Box to string
        System.out.println(str);
    }
}

class ClassV {
    double wigth;
    double height;
    double depth;

    ClassV(double wight, double height, double depth) {
        this.wigth = wight;
        this.height = height;
        this.depth = depth;
    }

    public String toString() {
        return "Dimensions are " + wigth + " by " +
                depth + " by " + height + ".";
    }
}

/*


----------------------------------------------------------------------------------------------------------------------
Еще одним важным в классе Object является метод toString(), возвращающий значение объекта в виде символьной строки.
----------------------------------------------------------------------------------------------------------------------
Большая часть, но не все методы toString() возвращают символьную строку, со­стоящую из имени класса, после которого
следуют значения его полей в квадратных скобках.
----------------------------------------------------------------------------------------------------------------------
Метод toString () универсален. Имеется следующее веское основание для его ре­ализации в каждом классе: если объект
объединяется с символьной строкой с помо­щью операции +, компилятор Java автоматически вызывает метод toString(),
чтобы получить строковое представление этого объекта:
----------------------------------------------------------------------------------------------------------------------
СОВЕТ. Вместо вызова х.toString() можно воспользоваться выражением " " + х. Сцепле­ние пустой символьной строки со
строковым представлением в переменой х равнозначно вызову метода х.toString(). Такое выражение будет корректным, даже
если переменная х относится к одному из примитивных типов.
----------------------------------------------------------------------------------------------------------------------
Метод toStringO, определенный в классе Object, выводит имя класса и адрес объекта.
----------------------------------------------------------------------------------------------------------------------
ВНИМАНИЕ! Как ни досадно, но массивы наследуют метод toString() от класса Object, в ре­зультате чего тип массива
выводится в архаичном формате. Например, при выполнении приведен­ного ниже фрагмента кода получается символьная
строка " [101а46еЗО", где префикс [ I означа­ет массив целых чисел.
    int[] luckyNumbers = { 2, 3, 5, 7, 11, 13 };
    String s = "" + luckyNumbers;
В качестве выхода из этого неприятного положения можно вызвать статический метод Arrays.toString(). Так, при
выполнении следующего фрагмента кода будет получена символьная строка "[2, 3, 5, 7, 11, 13]”:
    String s = Arrays. toString (luckyNumbers) ;
А для корректного вывода многомерных массивов следует вызывать метод Arrays.deepToString().
----------------------------------------------------------------------------------------------------------------------
СОВЕТ. Настоятельно рекомендуется переопределять метод toString() в каждом создаваемом вами классе. Это будет полезно
как вам, так и тем, кто пользуется плодами ваших трудов.
----------------------------------------------------------------------------------------------------------------------
•String toString()
    Возвращает символьную строку, представляющую значение объекта. Этот метод следует переопре­
    делить при создании собственных классов.
----------------------------------------------------------------------------------------------------------------------
*/
