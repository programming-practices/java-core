package Examples.Regex;

import java.util.Arrays;
import java.util.regex.Pattern;

public class ExamplePattern {
    public static void main(String[] args) {
//---------------------------------------------------------------------------------------------------------------------

        // XML тэг в формате <xxx></xxx>
        Pattern patternXML = Pattern.compile("^<([a-z]+)([^>]+)*(?:>(.*)<\\/\\1>|\\s+\\/>)$");

//---------------------------------------------------------------------------------------------------------------------

        // email адрес в формате xxx@xxx.xxx (регистр букв игнорируется)
        Pattern patternEMAIL = Pattern.compile("^([a-z0-9_\\.-]+)@([a-z0-9_\\.-]+)\\.([a-z\\.]{2,6})$", Pattern.CASE_INSENSITIVE);

//--------------------------------------------------------------------------------------------------------------------

        // Иногда нам необходимо просто проверить есть ли в строке подстрока, что удовлетворяет заданному РВ.
        // Для этого используют статический метод matches, например:

        // это hex код цвета?
        if (Pattern.matches("^#?([a-f0-9]{6}|[a-f0-9]{3})$", "#8b2323")) { // вернет true
            // делаем что-то
        }


//--------------------------------------------------------------------------------------------------------------------

        // Также иногда возникает необходимость разбить строку на массив
        // подстрок используя РВ. В этом нам поможет метод split:

        Pattern pattern = Pattern.compile(":|;");
        String[] animals = pattern.split("cat:dog;bird:cow");
        Arrays.asList(animals).forEach(animal -> System.out.print(animal + " "));
        // cat dog bird cow


//--------------------------------------------------------------------------------------------------------------------
    }
}

/*
----------------------------------------------------------------------------------------------------------------------
• Stream<String> splitAsStream (CharSequence input) 8
Возвращает поток данных, элементы которого являются частями последовательности
символов input, разделяемых по данному шаблону.
----------------------------------------------------------------------------------------------------------------------
*/
