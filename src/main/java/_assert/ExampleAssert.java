package _assert;

import java.util.Scanner;

// A poor way to use assert!!!
public class ExampleAssert {

    // get age random number generator
    static int val = 3;
    static int number = 10;

    // Return an integer.
    static int getnum() {
        return val--;
    }

    static int getI() {
        return 1;
    }

    //  Chtobu proverit eti exemplos to nado zdelat vsio cherez class loader
    public static void main(String args[]) {
//---------------------------------------------------------------------------------------------------------------------
//        int n = 0;
//        for(int i=0; i < 10; i++) {
//            assert (n = getnum()) > 0; // This is not age good idea!
//            System.out.println("n is " + n);
//        }
//---------------------------------------------------------------------------------------------------------------------
//            assert false : getI();
//            assert false : new IOException();
//            assert false : number = 11;
//            assert (++number > 5);
//---------------------------------------------------------------------------------------------------------------------
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter us age: ");

        int value = scanner.nextInt();
        assert value >= 18 : " Not valid";

        System.out.println("value is " + value);
////---------------------------------------------------------------------------------------------------------------------
//            int n1 = -1;
//            assert n1 < 0;
//            System.out.println(n1);
//---------------------------------------------------------------------------------------------------------------------
//            /*Чтобы проверить, является ли числовое значение переменной х неотрицательным, достаточно написать
//            следующий оператор:*/
//            int x = 0;
//            assert x >= 0;
//            /*Кроме того, можно передать конкретное значение переменной х объекту типа AssertionError, чтобы впоследствии
//            вывести его, как показано ниже.*/
//            assert x >= 0 : x;
//---------------------------------------------------------------------------------------------------------------------

    }
}

/*
----------------------------------------------------------------------------------------------------------------------
Еще одни м относительно новым дополнением языка jаvа я вляется ключевое
слово a s s e r t . Оно используется на стадии разработки программ для создания
так называемых утверждений - условий , которые должн ы быть истинными во
время выполнения программы. Например, в программе может быть метод, ко­
торый всегда возвращает положительное целое значение. Его можно проверить
ут верждением, что возвращаемое значение больше нул я , используя оператор
a s s e r t . Если во время выполнения программы условие оказывается истинным ,
то никаких действий больше не выполняется. Но если условие окажется ложным ,
то генерируется исключение типа As s e r t i onE r r o r . Утверждения часто приме­
няются с целью проверить, что некоторое ожидаемое условие действительно вы­
полняется. В коде окончательной версии программы утверждения, как правило ,
отсутствуют.
Ключевое слово a s s e r t имеет две формы . Первая его форма выглядит следую­
щим образом:
assert условие ;
где условие обозначает выражение, в результате вычисления которого должно
быть получено логическое значение. Если это логическое значение t r u e , то ут­
верждение истинно и никаких действий больше не выполняется. Если же вычис­
ление условия дает логическое значение fa l s e , то утверждение не подтверждает­
ся и по умолчанию генерируется объект исключения типа A s s e r t i on E r r o r .
Ниже приведена вторая форма оператора a s s e r t .
assert усло8Же : 1Шражение ;
В этой версии выражение обозначает значение, которое передается конструк­
тору класса исключения As s e r t i onEr r o r . Это значение преобразуется в строко­
вую форму и выводится , если утверждение не подтверждается. Как правило , в ка­
честве выражения задается символьная строка, но, в общем, разрешается любое
выражение, кроме типа v o i d , при условии , что оно допускает приемлемое строко­
вое преобразование
----------------------------------------------------------------------------------------------------------------------
HA ЗАМЕТКУ! Единственная цель, которую преследует в ы р а ж е н и е в операторе assert, полу­
чить символьную строку сообщения. В объекте типа AssertionError конкретное значение вы­
ражения не хранится, поэтому его нельзя запросить в дальнейшем. В документации на JDK снис­
ходительно сообщается, что это сделано для того, чтобы "стимулировать программистов устранять
ошибки, выявляемые в результате непрохождения тестов на утверждения, которые противоречат
основному назначению программных средств” .
----------------------------------------------------------------------------------------------------------------------
Чтобы разрешить проверку утверждений во время выполнения , следует указать
параметр -еа в командной строке. Например, для проверки утверждений в классе
As s e r t Demo нужно ввести следующую команду:
java -еа nazva klassa
----------------------------------------------------------------------------------------------------------------------
*/
