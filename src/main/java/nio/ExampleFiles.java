package nio;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.stream.Stream;

public class ExampleFiles {
    public static void main(String[] args) throws IOException {
//---------------------------------------------------------------------------------------------------------------------
        Path path = Paths.get("src/main/resources/nio/Example.txt");
//        System.out.println(Files.isReadable(path));
//        System.out.println(Files.isWritable(path));
//
//        System.out.println(Files.readAttributes(path, DosFileAttributes.class));
//        System.out.println(Files.readAttributes(path, PosixFileAttributes.class));
//
////        System.out.println(Files.getFileAttributeView(path,DosFileAttributes.class));
//---------------------------------------------------------------------------------------------------------------------
        /*С другой стороны, прочитать короткий текст из файла в символьную строку
        можно следующим образом:*/
//        String content = new String (Files.readAllBytes(path));
//        System.out.println(content);

        /*Но если требуется прочитать содержимое файла в виде последовательности
        строк, то необходимо сделать следующий вызов:*/
//        List<String> lines = Files.readAllLines(path);
//        System.out.println(lines);

        /*Если же файл крупный, строки можно обрабатывать по требованию в виде
        потока типа Stream<String>, как показано ниже.*/
        try (Stream<String> lines = Files.lines(path)) {
            lines.forEach(System.out::println);
        }
//---------------------------------------------------------------------------------------------------------------------
    }
}


/*
----------------------------------------------------------------------------------------------------------------------
Большинство действий, которые выполняются над файлами, предоставляются
статическими методами из класса F i l e s . Пугь к файлу, над которым выполняются
определенные действия, задает объект типа Ра th. Таким образом, методы из клас·
са F i l e s используют объект типа Path, чтобы указать используемый файл. Класс
F i 1 е s обладает обширным рядом функциональных возможностей. Так, в нем име­
ются методы, позволяющие открывать или создавать файл по указанному пуrи.
Кроме того, из объекта типа Path можно получить следующие сведения о файле:
является ли он исполняемым, скрытым или доступным только для чтения.
В классе Fi l e s предоставляются также методы, позволяющие копировать или перемещать
файлы. Некоторые методы, определенные в этом классе, перечислены в табл.
2 1 .б. Помимо исключения типа I OExcept ion, возможны и другие исключения.
В версии jDК 8 класс Fi l e s дополнен следующими четырьмя методами: l i s t ( ) ,
wa l k ( ) , l i ne s ( ) и fArgInt i nd ( ) . Все эти методы возвращают объект типа S t rearn. Они
способствуют интеграции системы ввода-вывода nio с новым прикладным про­
граммным интерфейсом API потоков ввода-вывода, определенным в версии JDK 8
и описываемым в главе 29.
----------------------------------------------------------------------------------------------------------------------
Внимание! В одних методах и конструкторах, например, в конструкторе String (byte []),
используется кодировка, принятая на платформе по умолчанию, если не указано иное.
А в других методах и конструкторах, например, в конструкторе Files.readAllLines(),
применяется кодировка UTF-8.
----------------------------------------------------------------------------------------------------------------------
• static Stream<String> lines(Path path) 8
• static Stream<String> lines(Path path, Charset cs) 8
Возвращают поток данных, элементы которого составляют строки из указанного файла в
кодировке UTF-8 или в заданном наборе символов.
----------------------------------------------------------------------------------------------------------------------

*/