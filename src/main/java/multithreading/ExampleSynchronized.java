package multithreading;

public class ExampleSynchronized {

    private final static int N = 1_000_000;
    private static int counter = 0;

    public synchronized static int increment() {
        return counter++;
    }

    public static void main(String[] args) throws InterruptedException {

        Thread thread_1 = new Thread(() -> {

            for (int i = 0; i < N; i++) {
                increment();
            }
        });

        Thread thread_2 = new Thread(() -> {

            for (int i = 0; i < N; i++) {
                increment();
            }
        });

        thread_1.start();
        thread_2.start();

        thread_1.join();
        thread_2.join();

        System.out.println(counter);

    }
}

/*
---------------------------------------------------------------------------------------------------------------------------
Встроенным блокировкам и условиям присущи некоторые ограничения, в том числе приведенные ниже.
	• Нельзя прервать поток исполнения, который пытается захватить блокировку.
	• Нельзя указать время ожидания, пытаясь захватить блокировку.
	• Наличие единственного условия на блокировку может оказаться неэффективным.
---------------------------------------------------------------------------------------------------------------------------
Что же лучше использовать в прикладном коде: объекты типа Lock и Condition или синхронизированные методы? Ниже приведены 
некоторые рекомендации, кото­рые дают ответ на этот вопрос.
	• Лучше не пользоваться ни объектами типа Lock/Condition, ни ключевым словом synchronized. Зачастую вместо этого можно 
	  выбрать подходящий механизм из пакета java.util.concurrent, который организует блокировку автоматически. Так, в разделе 
	  14.6 далее в этой главе будет показано, как поль­зоваться блокирующими очередями для синхронизации потоков, выполняю­
	  щих общую задачу.
	• Если ключевое слово synchronized подходит в конкретной ситуации, непре­менно воспользуйтесь им. В этом случае вам 
	  придется написать меньше кода,а следовательно, допустить меньше ошибок. В листинге 14.8 приведен пример очередного 
	  варианта программы, имитирующей банк и реализованной на ос­нове синхронизированных методов.
	• Пользуйтесь объектами типа Lock/Condition, если действительно нуждаетесь
	  в дополнительных возможностях подобных конструкций.
---------------------------------------------------------------------------------------------------------------------------
*/
